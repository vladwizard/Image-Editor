Index: src/components/PreferencesArea/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\r\nimport style from './PreferencesArea.css'\r\nimport s from '../../assets/background.png'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {setImage, setBackground} from '../../Redux/slices/imagesDataSlice'\r\n\r\nexport default function PreferencesArea() {\r\n\r\n    const backgroundHeight = useSelector((state) => state.imagesData.backgroundHeight)\r\n    const backgroundWidth = useSelector((state) => state.imagesData.backgroundWidth);\r\n    const images = useSelector((state) => state.imagesData.items);\r\n    const dispatch = useDispatch()\r\n    const fileInputRef = React.createRef();\r\n    const imgInputRef = React.createRef();\r\n\r\n    const [imageURl, setImageURL] = React.useState('');\r\n\r\n    const [fileInput, setFileInput] = React.useState(null);\r\n    React.useEffect(() => {\r\n            dispatch(setImage(['https://sun9-west.userapi.com/sun9-39/s/v1/if2/WnaUDudfVL5N3TEanMqOQ926BhEkeL8OmztoAl-y0uLxhWIyKxO-GEEq1WjB40ZMFAOwPIQvtVno5yorRc0lCw8_.jpg?size=750x478&quality=96&type=album', 400, 400]))\r\n        }, []\r\n    )\r\n\r\n    function previewFile() {\r\n        // var preview = imgInputRef.current;\r\n        var file = document.querySelector('input[type=file]').files[0];\r\n        var reader = new FileReader();\r\n\r\n        reader.onloadend = function () {\r\n            // preview.src = reader.result;\r\n\r\n            let img = new Image();\r\n            img.src = reader.result;\r\n            img.onload = function () {\r\n                // console.log(img.src);\r\n                dispatch(setImage([reader.result, this.width, this.height]));\r\n            }\r\n        }\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n        }\r\n        // else {\r\n        //     preview.src = \"\";\r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className='preferencesArea'>\r\n            <div className='sizeBackground'>\r\n                <label>Высота</label> <input type='text' value={backgroundHeight}\r\n                                             onChange={(e) => dispatch(setBackground([e.target.value, backgroundWidth]))}/>\r\n            </div>\r\n            <div className='sizeBackground'>\r\n                <label>Ширина</label> <input type='text' value={backgroundWidth}\r\n                                             onChange={(e) => dispatch(setBackground([backgroundHeight, e.target.value,]))}/>\r\n            </div>\r\n\r\n            <div className='urlArea'>\r\n                <label>Вставить ссылкой</label>\r\n                <textarea id=\"story\" name=\"story\" rows=\"7\"\r\n                          value={imageURl}\r\n                          onChange={(e) => {\r\n                              setImageURL(e.target.value);\r\n                          }}/>\r\n                <button  onClick={() => {\r\n\r\n\r\n                    let img = new Image();\r\n                    img.src = imageURl;\r\n                    img.onload = function () {\r\n                        // console.log(img.src);\r\n                        dispatch(setImage([imageURl, this.width, this.height]));\r\n                    }\r\n\r\n                }}>Отправить\r\n                </button>\r\n            </div>\r\n            <div>\r\n            <label>Вставить файлом</label>\r\n            <input type=\"file\" onChange={previewFile}></input>\r\n            </div>\r\n            {/*<br/>*/}\r\n            {/*<img src=\"\" height=\"200\" alt=\"Image preview...\" ref={imgInputRef}/>*/}\r\n\r\n            {/*<button onClick={() => {*/}\r\n\r\n\r\n            {/*    console.log()*/}\r\n            {/*}}>WATCH img*/}\r\n            {/*</button>*/}\r\n            {/*<button onClick={()=>{{console.log(window.URL.createObjectURL(fileInput.current.files[0]),123)}}}>123 </button>*/}\r\n\r\n\r\n        </div>\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/PreferencesArea/index.jsx	(revision f0d1b9fb5b736c4d6e40fb311ef815edd49c5e2a)
+++ src/components/PreferencesArea/index.jsx	(date 1654499504807)
@@ -2,7 +2,7 @@
 import style from './PreferencesArea.css'
 import s from '../../assets/background.png'
 import {useSelector, useDispatch} from 'react-redux'
-import {setImage, setBackground} from '../../Redux/slices/imagesDataSlice'
+import {setText, setImage, setBackground} from '../../Redux/slices/imagesDataSlice'
 
 export default function PreferencesArea() {
 
@@ -18,8 +18,11 @@
     const [fileInput, setFileInput] = React.useState(null);
     React.useEffect(() => {
             dispatch(setImage(['https://sun9-west.userapi.com/sun9-39/s/v1/if2/WnaUDudfVL5N3TEanMqOQ926BhEkeL8OmztoAl-y0uLxhWIyKxO-GEEq1WjB40ZMFAOwPIQvtVno5yorRc0lCw8_.jpg?size=750x478&quality=96&type=album', 400, 400]))
+            //  dispatch(setText('123123123123213'));
+            console.log(123123)
         }, []
     )
+    const [insertText, setInsertText] = React.useState('');
 
     function previewFile() {
         // var preview = imgInputRef.current;
@@ -63,7 +66,7 @@
                           onChange={(e) => {
                               setImageURL(e.target.value);
                           }}/>
-                <button  onClick={() => {
+                <button onClick={() => {
 
 
                     let img = new Image();
@@ -77,19 +80,17 @@
                 </button>
             </div>
             <div>
-            <label>Вставить файлом</label>
-            <input type="file" onChange={previewFile}></input>
+                <label>Вставить файлом</label>
+                <input type="file" onChange={previewFile}></input>
             </div>
-            {/*<br/>*/}
-            {/*<img src="" height="200" alt="Image preview..." ref={imgInputRef}/>*/}
-
-            {/*<button onClick={() => {*/}
-
-
-            {/*    console.log()*/}
-            {/*}}>WATCH img*/}
-            {/*</button>*/}
-            {/*<button onClick={()=>{{console.log(window.URL.createObjectURL(fileInput.current.files[0]),123)}}}>123 </button>*/}
+            <div>
+
+                <button onClick={() => {
+                    dispatch(setText("123123"));
+                }}>Вставить текст
+                </button>
+                <input value={insertText} onChange={(e) => setInsertText(e.target.value)} width='80%'/>
+            </div>
 
 
         </div>
Index: src/Redux/slices/imagesDataSlice.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst ImageData = (url, width, height, posX = 0, posY = 0) => {\r\n    return ({\r\n        url,\r\n        width,\r\n        height,\r\n        posX,\r\n        posY\r\n    })\r\n}\r\n\r\nconst initialState = {\r\n    backgroundHeight: 500,\r\n    backgroundWidth: 700,\r\n    items: [],\r\n    overflowHiden: false,\r\n}\r\n\r\n\r\nexport const imagesDataSlice = createSlice({\r\n    name: 'imagesData',\r\n    initialState,\r\n    reducers: {\r\n        // let img = new Image();\r\n        // img.src = action.payload;\r\n        // img.onload = function() {\r\n        //     alert(this.width + 'x' + this.height);\r\n        // };\r\n        setImage: (state, action) => {\r\n            // let img = new Image();\r\n            // img.src = action.payload[0];\r\n            let width = action.payload[1];\r\n            let height = action.payload[2];\r\n\r\n            // let prop = width/height;\r\n            //\r\n            //\r\n            // if(height>width){\r\n            //     height = state.backgroundHeight;\r\n            //     width = height * prop;\r\n            // }\r\n            // else{\r\n            //     width = state.backgroundWidth;\r\n            //     height = width / prop;\r\n            // }\r\n            //\r\n            // console.log(width);\r\n            // console.log(height);\r\n\r\n            state.items.push(new ImageData(action.payload[0], width, height));\r\n        },\r\n        setBackground: (state, action) => {\r\n            state.backgroundHeight = action.payload[0];\r\n            state.backgroundWidth = action.payload[1];\r\n        }\r\n    },\r\n})\r\n\r\n\r\nexport const {setImage, setBackground} = imagesDataSlice.actions\r\n\r\nexport default imagesDataSlice.reducer
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Redux/slices/imagesDataSlice.js	(revision f0d1b9fb5b736c4d6e40fb311ef815edd49c5e2a)
+++ src/Redux/slices/imagesDataSlice.js	(date 1654499040562)
@@ -5,8 +5,6 @@
         url,
         width,
         height,
-        posX,
-        posY
     })
 }
 
@@ -14,6 +12,7 @@
     backgroundHeight: 500,
     backgroundWidth: 700,
     items: [],
+    texts: [],
     overflowHiden: false,
 }
 
@@ -53,11 +52,14 @@
         setBackground: (state, action) => {
             state.backgroundHeight = action.payload[0];
             state.backgroundWidth = action.payload[1];
+        },
+        setText: (state, action) => {
+            state.texts.push(new ImageData(action.payload,150.15));
         }
     },
 })
 
 
-export const {setImage, setBackground} = imagesDataSlice.actions
+export const {setImage, setBackground, setText} = imagesDataSlice.actions
 
 export default imagesDataSlice.reducer
\ No newline at end of file
Index: src/Redux/slices/counterSlice.js
===================================================================
--- src/Redux/slices/counterSlice.js	(revision f0d1b9fb5b736c4d6e40fb311ef815edd49c5e2a)
+++ src/Redux/slices/counterSlice.js	(revision f0d1b9fb5b736c4d6e40fb311ef815edd49c5e2a)
@@ -1,30 +0,0 @@
-import { createSlice } from '@reduxjs/toolkit'
-
-const initialState = {
-    value: 0,
-}
-
-export const counterSlice = createSlice({
-    name: 'counter',
-    initialState,
-    reducers: {
-        increment: (state) => {
-            // Redux Toolkit allows us to write "mutating" logic in reducers. It
-            // doesn't actually mutate the state because it uses the Immer library,
-            // which detects changes to a "draft state" and produces a brand new
-            // immutable state based off those changes
-            state.value += 1
-        },
-        decrement: (state) => {
-            state.value -= 1
-        },
-        incrementByAmount: (state, action) => {
-            state.value += action.payload
-        },
-    },
-})
-
-// Action creators are generated for each case reducer function
-export const { increment, decrement, incrementByAmount } = counterSlice.actions
-
-export default counterSlice.reducer
\ No newline at end of file
